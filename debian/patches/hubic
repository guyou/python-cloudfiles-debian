Description: Add support for HubiC
 This patch was written by Gu1 <gu1@aeroxteam.fr> and published on
 https://github.com/Gu1/python-cloudfiles-hubic.git
 It adds support for HubiC authentication.
 .
 python-cloudfiles (1.7.11-2.gb) experimental; urgency=low
 .
   * Add hubic support
Author: Guilhem Bonnefille <guilhem.bonnefille@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- python-cloudfiles-1.7.11.orig/cloudfiles/connection.py
+++ python-cloudfiles-1.7.11/cloudfiles/connection.py
@@ -19,7 +19,7 @@ from    errors    import ResponseError, NoSuchContainer, ContainerNotEmpty, \
 from    Queue     import Queue, Empty, Full
 from    time      import time
 import  consts
-from    authentication import Authentication
+from    authentication import Authentication, HubicAuthentication
 from    fjson     import json_loads
 from    sys       import version_info
 # Because HTTPResponse objects *have* to have read() called on them
@@ -77,7 +77,11 @@ class Connection(object):
 
         if not self.auth:
             authurl = kwargs.get('authurl', consts.us_authurl)
-            if username and api_key and authurl:
+            if username and api_key and authurl and authurl.startswith('hubic|'):
+                self.auth = HubicAuthentication(username, api_key, authurl,
+                            useragent=self.user_agent, timeout=self.timeout)
+            elif username and api_key and authurl:
+
                 self.auth = Authentication(username, api_key, authurl=authurl,
                             useragent=self.user_agent, timeout=self.timeout)
             else:
--- python-cloudfiles-1.7.11.orig/cloudfiles/authentication.py
+++ python-cloudfiles-1.7.11/cloudfiles/authentication.py
@@ -9,10 +9,14 @@ See COPYING for license information.
 """
 
 from httplib  import HTTPSConnection, HTTPConnection
+from urllib   import quote, quote_plus, urlencode
 from utils    import parse_url, THTTPConnection, THTTPSConnection
 from errors   import ResponseError, AuthenticationError, AuthenticationFailed
 from consts   import user_agent, us_authurl, uk_authurl
 from sys      import version_info
+import re
+import urlparse
+import json
 
 
 class BaseAuthentication(object):
@@ -97,4 +101,143 @@ class Authentication(BaseAuthentication):
 
         return (storage_url, cdn_url, auth_token)
 
+class HubicAuthentication(BaseAuthentication):
+    """
+    Authentication for OVH's hubiC cloud storage service
+    """
+    OAUTH = "https://api.hubic.com/oauth/"
+    HUBIC_API = "https://api.hubic.com/1.0/"
+
+    def __init__(self, username, api_key, authurl, timeout=15, useragent=None):
+        self.login = username
+        self.password  = api_key
+        self.authurl = authurl
+        infos = self.authurl.split('|')
+        if len(infos) < 4:
+            raise AuthenticationError('You must give 3 vertical-bar separated arguments after hubic|')
+        self.client_id = infos[1]
+        self.client_secret = infos[2]
+        self.redirect_uri = infos[3]
+        self.timeout = timeout
+
+    def _parse_error(self, resp):
+        headers = dict(resp.getheaders())
+        if not 'location' in headers:
+            return None
+        query = urlparse.urlsplit(headers['location']).query
+        qs = dict(urlparse.parse_qsl(query))
+        return {'error': qs['error'], 'error_description': qs['error_description']}
+
+    def _get(self, url, params=None, headers={}):
+        host, port, uri, is_ssl = parse_url(url)
+        conn = HTTPSConnection(host, port, timeout=self.timeout)
+        conn.request('GET', '/' + uri + ('?'+urlencode(params) if params else ''),
+                     headers=headers)
+        response = conn.getresponse()
+        return conn, response
+
+    def _post(self, url, data=None, headers={}):
+        host, port, uri, is_ssl = parse_url(url)
+        conn = HTTPSConnection(host, port, timeout=self.timeout)
+        headers.update({'Content-type': 'application/x-www-form-urlencoded'})
+        conn.request('POST', '/' + uri, urlencode(data) if data else None, headers)
+        response = conn.getresponse()
+        return conn, response
+
+    def authenticate(self):
+        c, r = self._get(
+            self.OAUTH+'auth/',
+            {
+                'client_id': self.client_id,
+                'redirect_uri': self.redirect_uri,
+                'scope': 'credentials.r,account.r',
+                'response_type': 'code',
+                'state': ''
+            }
+        )
+        if r.status != 200:
+            raise AuthenticationFailed("Incorrect/unauthorized "
+                    "HubiC client_id (%s)"%str(self._parse_error(r)))
+
+        rdata = r.read()
+        c.close()
+
+        try:
+            from lxml import html as lxml_html
+        except ImportError:
+            lxml_html = None
+
+        if lxml_html:
+            oauth = lxml_html.document_fromstring(rdata).xpath('//input[@name="oauth"]')
+            oauth = oauth[0].value if oauth else None
+        else:
+            oauth = re.search(r'<input\s+[^>]*name=[\'"]?oauth[\'"]?\s+[^>]*value=[\'"]?(\d+)[\'"]?>', rdata)
+            oauth = oauth.group(1) if oauth else None
+
+        if not oauth:
+            raise AuthenticationError("Unable to get oauth_id from authorization page")
+
+        c, r = self._post(
+            self.OAUTH+'auth/',
+            data={
+                'action': 'accepted',
+                'oauth': oauth,
+                'login': self.login,
+                'user_pwd': self.password,
+                'account': 'r',
+                'credentials': 'r',
+
+            },
+        )
+        c.close()
+
+        if r.status == 302 and r.getheader('location', '').startswith(self.redirect_uri):
+            query = urlparse.urlsplit(r.getheader('location')).query
+            code = dict(urlparse.parse_qsl(query))['code']
+        else:
+            raise AuthenticationFailed("Unable to authorize client_id, invalid login/password ?")
+
+        c, r = self._post(
+            self.OAUTH+'token/',
+            {
+                'code': code,
+                'redirect_uri': self.redirect_uri,
+                'grant_type': 'authorization_code',
+            },
+            {
+                'Authorization': 'Basic '+('{0}:{1}'.format(self.client_id, self.client_secret)
+                                                    .encode('base64').replace('\n', ''))
+            }
+        )
+
+        rdata = r.read()
+        c.close()
+
+        if r.status != 200:
+            try:
+                err = json.loads(rdata)
+                err['code'] = r.status
+            except Exception as e:
+                err = {}
+
+            raise AuthenticationFailed("Unable to get oauth access token, "
+                                       "wrong client_id or client_secret ? (%s)"%str(err))
+
+        oauth_token = json.loads(rdata)
+        if oauth_token['token_type'].lower() != 'bearer':
+            raise AuthenticationError("Unsupported access token type")
+
+        c, r = self._get(
+            self.HUBIC_API+'account/credentials/',
+            headers={
+                'Authorization': 'Bearer '+oauth_token['access_token']
+            }
+        )
+
+        swift = json.loads(r.read())
+        c.close()
+
+        return swift['endpoint'], None, swift['token']
+
+
 # vim:set ai ts=4 sw=4 tw=0 expandtab:
