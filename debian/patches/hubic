Description: Add support for HubiC
 This patch was written by Gu1 <gu1@aeroxteam.fr> and published on
 https://github.com/Gu1/python-cloudfiles-hubic.git
 It adds support for HubiC authentication.
 .
 python-cloudfiles (1.7.11-2.gb) experimental; urgency=low
 .
   * Add hubic support
Author: Guilhem Bonnefille <guilhem.bonnefille@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- python-cloudfiles-1.7.11.orig/cloudfiles/connection.py
+++ python-cloudfiles-1.7.11/cloudfiles/connection.py
@@ -19,7 +19,7 @@ from    errors    import ResponseError,
 from    Queue     import Queue, Empty, Full
 from    time      import time
 import  consts
-from    authentication import Authentication
+from    authentication import Authentication, HubicAuthentication
 from    fjson     import json_loads
 from    sys       import version_info
 # Because HTTPResponse objects *have* to have read() called on them
@@ -77,7 +77,11 @@ class Connection(object):
 
         if not self.auth:
             authurl = kwargs.get('authurl', consts.us_authurl)
-            if username and api_key and authurl:
+            if username and api_key and authurl and 'hubic' in authurl:
+                self.auth = HubicAuthentication(username, api_key,
+                            useragent=self.user_agent, timeout=self.timeout)
+            elif username and api_key and authurl:
+
                 self.auth = Authentication(username, api_key, authurl=authurl,
                             useragent=self.user_agent, timeout=self.timeout)
             else:
--- python-cloudfiles-1.7.11.orig/cloudfiles/authentication.py
+++ python-cloudfiles-1.7.11/cloudfiles/authentication.py
@@ -97,4 +97,54 @@ class Authentication(BaseAuthentication)
 
         return (storage_url, cdn_url, auth_token)
 
+class HubicAuthentication(BaseAuthentication):
+    """
+    Authentication for OVH's hubiC cloud storage service
+    """
+    SESSIONHANDLER='https://ws.ovh.com/sessionHandler/r4/'
+    HUBIC='https://ws.ovh.com/hubic/r5/'
+    def __init__(self, username, api_key, timeout=15, useragent=None):
+        self.username = username
+        self.api_key = api_key
+        self.timeout = timeout
+
+    def _rpc(self, url, method, params=None):
+        import urllib
+        import json
+        host, port, uri, is_ssl = parse_url(url)
+        conn = HTTPSConnection(host, port, timeout=self.timeout)
+        uri+='/rest.dispatcher/'+method
+        if params:
+            uri+= '?' + urllib.urlencode({'params': json.dumps(params)})
+        conn.request('GET', '/' + uri)
+        response = conn.getresponse()
+        data=response.read()
+        if response.status != 200:
+            raise AuthenticationError("Invalid response from hubiC")
+        conn.close()
+        return json.loads(data)
+
+    def _sessionHandler(self, method, params=None):
+        return self._rpc(self.SESSIONHANDLER, method, params)
+
+    def _hubic(self, method, params=None):
+        return self._rpc(self.HUBIC, method, params)
+
+    def authenticate(self):
+        r = self._sessionHandler('getAnonymousSession')['answer']
+
+        r = self._hubic('getHubics', {'sessionId': r['session']['id'], 'email': self.username})
+        if not r['answer']:
+            raise AuthenticationFailed('Unknown username')
+        nic = r['answer'][0]['nic']
+        hubicId = r['answer'][0]['id']
+
+        r = self._sessionHandler('login', {'login': nic, 'password': self.api_key, 'context': 'hubic'})
+        if r['error'] or not r['answer']:
+            raise AuthenticationFailed('Invalid username/password')
+        r = r['answer']
+
+        r = self._hubic('getHubic', {'sessionId': r['session']['id'], 'hubicId': hubicId})['answer']
+        return r['credentials']['username'].decode('base64'), None, r['credentials']['secret']
+
 # vim:set ai ts=4 sw=4 tw=0 expandtab:
